service: automation-portal

provider:
  name: aws
  runtime: go1.x
  memorySize: 128
  timeout: 1
  stage: ${opt:stage, 'playground'}
  region: us-east-1
  environment:
    TASK_DEFINITION: ${env:TASK_DEFINITION, "robot-framework-task:latest"}
    CLUSTER_NAME: ${env:CLUSTER_NAME}
    SECURITY_GROUP: ${env:SECURITY_GROUP}
    SUBNET_IDS: ${env:SUBNET_IDS}
    BUCKET_NAME: ${env:BUCKET_NAME}
    ASSETS_URL: ${env:ASSETS_URL}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource:
        - Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "ss-"
            - ${self:provider.stage}
            - "-robot-assets"
            - "/*"
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "ss-"
            - ${self:provider.stage}
            - "-robot-assets"
            - "/*"
    - Effect: "Allow"
      Action:
        - "events:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "ecs:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "iam:PassRole"
      Resource: "arn:aws:iam::950473261671:role/ecsTaskExecutionRole"

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  s3parser:
    handler: bin/s3parser
    events:
      - http:
          path: logs
          method: get
          cors:
            origin: '*'
  scheduler:
    handler: bin/scheduler
    events:
      - http:
          path: cron
          method: get
          cors:
            origin: '*'
  manual:
    handler: bin/manual
    events:
      - http:
          path: manual
          method: post
          cors:
            origin: '*'
